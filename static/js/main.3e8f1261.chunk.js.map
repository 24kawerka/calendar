{"version":3,"sources":["Calendar/Calendar.module.css","DaysOfWeek/DaysOfWeek.module.css","Calendar/Calendar.jsx","DaysOfWeek/DaysOfWeek.jsx","NameMonth/NameMonth.jsx","Year/Year.jsx","redux/calendar_reduser.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Calendar","props","arr1","arr2","arr4","DayFirst","i","push","className","styles","td","dayLast","Date","state","date","getFullYear","getMonth","getDay","Array","splice","dayWeekLast","concat","arr3","map","number2","table","DaysOfWeek","days","week","NameMonth","monthName","Year","InitialState","calendarReduser","action","type","store","createStore","App","useReducer","dispatch","getDate","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3e8f1261.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"td\":\"Calendar_td__1WuvE\",\"table\":\"Calendar_table__2eYLd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"DaysOfWeek_table__3FFHf\",\"td\":\"DaysOfWeek_td__1gnR_\"};","import React from \"react\";\r\nimport styles from \"./Calendar.module.css\";\r\n\r\nconst Calendar = (props) => {\r\n  let arr1 = [];\r\n  let arr2 = [];\r\n  let arr4 = [];\r\n  if (props.DayFirst !== 0) {\r\n    for (let i = 1; i < props.DayFirst; i++)\r\n      arr2.push(<td className={styles.td}>{[\"\"]}</td>);\r\n  } else {\r\n    for (let i = 0; i < 6; i++) {\r\n      arr2.push(<td className={styles.td}>{[\"\"]}</td>);\r\n    }\r\n  }\r\n\r\n  for (let i = 1; i <= props.dayLast; i++) {\r\n    arr2.push(<td className={styles.td}>{[i]}</td>);\r\n    if (\r\n      new Date(\r\n        props.state.date.getFullYear(),\r\n        props.state.date.getMonth(),\r\n        i\r\n      ).getDay() == 0\r\n    ) {\r\n      arr1.push(new Array([...arr2.splice(0, 7)]));\r\n    }\r\n  }\r\n\r\n  if (props.dayWeekLast !== 0) {\r\n    for (let i = props.dayWeekLast; i < 7; i++) {\r\n      arr4.push(<td className={styles.td}>{[\"\"]}</td>);\r\n    }\r\n    arr1.push(new Array([...arr2].concat(arr4)));\r\n  } else {\r\n    arr1.push(new Array([...arr2.splice(0, 7)]));\r\n  }\r\n  let arr3 = arr1.map((number2) => <tr className={styles.td}>{number2}</tr>);\r\n  return (\r\n    <div className={styles.Calendar}>\r\n      <table className={styles.table}>{arr3}</table>\r\n    </div>\r\n  );\r\n};\r\nexport default Calendar;\r\n","import React from \"react\";\r\nimport styles from \"./DaysOfWeek.module.css\";\r\nimport Calendar from \"./../Calendar/Calendar\";\r\nconst DaysOfWeek = () => {\r\n  let arr1 = [\"пн\", \"вт\", \"ср\", \"чт\", \"пт\", \"сб\", \"вс\"];\r\n  let days = arr1.map((week) => <th className={styles.td}>{week}</th>);\r\n\r\n  return <table className={styles.table}>{days}</table>;\r\n};\r\n\r\nexport default DaysOfWeek;\r\n","import React from \"react\";\r\nimport styles from \"./NameMonth.module.css\";\r\n\r\nconst NameMonth = (props) => {\r\n  let arr2 = [\r\n    \"Январь\",\r\n    \"Февраль\",\r\n    \"Март\",\r\n    \"Апрель\",\r\n    \"Май\",\r\n    \"Июнь\",\r\n    \"Июль\",\r\n    \"Август\",\r\n    \"Сентябрь\",\r\n    \"Октябрь\",\r\n    \"Ноябрь\",\r\n    \"Декабрь\",\r\n  ];\r\n\r\n  let monthName = props.state.date.getMonth();\r\n\r\n  return (\r\n    <div>\r\n      <div>{arr2[monthName]}</div>\r\n    </div>\r\n  );\r\n};\r\nexport default NameMonth;\r\n","import React from \"react\";\r\n\r\nconst Year = (props) => {\r\n  let year = props.state.date.getFullYear();\r\n  return year;\r\n};\r\n\r\nexport default Year;\r\n","import { createStore } from \"redux\";\r\nexport let NEXT_MONTH = \"NEXT_MONTH\";\r\nexport let PAST_MONTH = \"PAST_MONTH\";\r\nlet InitialState = {\r\n  date: new Date(),\r\n};\r\nexport const calendarReduser = (state = InitialState, action) => {\r\n  switch (action.type) {\r\n    case NEXT_MONTH: {\r\n      return {\r\n        ...state,\r\n        date: new Date(state.date.getFullYear(), state.date.getMonth() + 1),\r\n      };\r\n    }\r\n    case PAST_MONTH: {\r\n      return {\r\n        ...state,\r\n        date: new Date(state.date.getFullYear(), state.date.getMonth() - 1),\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// export const next_month = () => {\r\n//   return {\r\n//     type: NEXT_MONTH,\r\n//   };\r\n// };\r\n// export const past_month = () => {\r\n//   return {\r\n//     type: PAST_MONTH,\r\n//   };\r\n// };\r\n\r\nexport let store = createStore(calendarReduser);\r\n","import React, { useReducer } from \"react\";\nimport Calendar from \"./Calendar/Calendar\";\nimport DaysOfWeek from \"./DaysOfWeek/DaysOfWeek\";\nimport NameMonth from \"./NameMonth/NameMonth\";\nimport Year from \"./Year/Year\";\nimport \"./App.css\";\nimport {\n  calendarReduser,\n  NEXT_MONTH,\n  PAST_MONTH,\n} from \"./redux/calendar_reduser\";\n\nconst App = (props) => {\n  const [state, dispatch] = useReducer(calendarReduser, { date: new Date() });\n  let dayLast = new Date(\n    state.date.getFullYear(),\n    state.date.getMonth() + 1,\n    0\n  ).getDate();\n  let dayWeekLast = new Date(\n    state.date.getFullYear(),\n    state.date.getMonth(),\n    dayLast\n  ).getDay();\n  let DayFirst = new Date(\n    state.date.getFullYear(),\n    state.date.getMonth(),\n    1\n  ).getDay();\n\n  return (\n    <div className=\"background\">\n      <div className=\"app_wrapper\">\n        <div className=\"Year\">\n          <Year state={state} />\n        </div>\n        <button\n          onClick={() => dispatch({ type: PAST_MONTH })}\n          className=\"buttonPast\"\n        >\n          past\n        </button>\n        <div className=\"NameMonth\">\n          <NameMonth state={state} />\n        </div>\n        <button\n          onClick={() => dispatch({ type: NEXT_MONTH })}\n          className=\"buttonNext\"\n        >\n          next\n        </button>\n\n        <div className=\"DaysOfWeek\">\n          <DaysOfWeek state={state} />\n        </div>\n        <div className=\"NumberDays\">\n          <Calendar\n            state={state}\n            DayFirst={DayFirst}\n            dayLast={dayLast}\n            dayWeekLast={dayWeekLast}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { store } from \"./redux/calendar_reduser\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App store={store} />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}